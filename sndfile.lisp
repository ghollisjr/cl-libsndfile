;;;; cl-libsndfile is a Common Lisp data analysis library.
;;;; Copyright 2017 Gary Hollis
;;;;
;;;; cl-libsndfile is in the public domain; use it for whatever.

;;;; I've added some intro code here, and also some minor fixes to the
;;;; swig code below, marked with comments to explain.
(in-package :cl-libsndfile)

(define-foreign-library libsndfile
    (t (:default "libsndfile")))

(use-foreign-library libsndfile)

;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.12
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(defanonenum 
	(SF_FORMAT_WAV #.#x010000)
	(SF_FORMAT_AIFF #.#x020000)
	(SF_FORMAT_AU #.#x030000)
	(SF_FORMAT_RAW #.#x040000)
	(SF_FORMAT_PAF #.#x050000)
	(SF_FORMAT_SVX #.#x060000)
	(SF_FORMAT_NIST #.#x070000)
	(SF_FORMAT_VOC #.#x080000)
	(SF_FORMAT_IRCAM #.#x0A0000)
	(SF_FORMAT_W64 #.#x0B0000)
	(SF_FORMAT_MAT4 #.#x0C0000)
	(SF_FORMAT_MAT5 #.#x0D0000)
	(SF_FORMAT_PVF #.#x0E0000)
	(SF_FORMAT_XI #.#x0F0000)
	(SF_FORMAT_HTK #.#x100000)
	(SF_FORMAT_SDS #.#x110000)
	(SF_FORMAT_AVR #.#x120000)
	(SF_FORMAT_WAVEX #.#x130000)
	(SF_FORMAT_SD2 #.#x160000)
	(SF_FORMAT_FLAC #.#x170000)
	(SF_FORMAT_CAF #.#x180000)
	(SF_FORMAT_WVE #.#x190000)
	(SF_FORMAT_OGG #.#x200000)
	(SF_FORMAT_MPC2K #.#x210000)
	(SF_FORMAT_RF64 #.#x220000)
	(SF_FORMAT_PCM_S8 #.#x0001)
	(SF_FORMAT_PCM_16 #.#x0002)
	(SF_FORMAT_PCM_24 #.#x0003)
	(SF_FORMAT_PCM_32 #.#x0004)
	(SF_FORMAT_PCM_U8 #.#x0005)
	(SF_FORMAT_FLOAT #.#x0006)
	(SF_FORMAT_DOUBLE #.#x0007)
	(SF_FORMAT_ULAW #.#x0010)
	(SF_FORMAT_ALAW #.#x0011)
	(SF_FORMAT_IMA_ADPCM #.#x0012)
	(SF_FORMAT_MS_ADPCM #.#x0013)
	(SF_FORMAT_GSM610 #.#x0020)
	(SF_FORMAT_VOX_ADPCM #.#x0021)
	(SF_FORMAT_G721_32 #.#x0030)
	(SF_FORMAT_G723_24 #.#x0031)
	(SF_FORMAT_G723_40 #.#x0032)
	(SF_FORMAT_DWVW_12 #.#x0040)
	(SF_FORMAT_DWVW_16 #.#x0041)
	(SF_FORMAT_DWVW_24 #.#x0042)
	(SF_FORMAT_DWVW_N #.#x0043)
	(SF_FORMAT_DPCM_8 #.#x0050)
	(SF_FORMAT_DPCM_16 #.#x0051)
	(SF_FORMAT_VORBIS #.#x0060)
	(SF_FORMAT_ALAC_16 #.#x0070)
	(SF_FORMAT_ALAC_20 #.#x0071)
	(SF_FORMAT_ALAC_24 #.#x0072)
	(SF_FORMAT_ALAC_32 #.#x0073)
	(SF_ENDIAN_FILE #.#x00000000)
	(SF_ENDIAN_LITTLE #.#x10000000)
	(SF_ENDIAN_BIG #.#x20000000)
	(SF_ENDIAN_CPU #.#x30000000)
	(SF_FORMAT_SUBMASK #.#x0000FFFF)
	(SF_FORMAT_TYPEMASK #.#x0FFF0000)
	(SF_FORMAT_ENDMASK #.#x30000000))

(defanonenum 
	(SFC_GET_LIB_VERSION #.#x1000)
	(SFC_GET_LOG_INFO #.#x1001)
	(SFC_GET_CURRENT_SF_INFO #.#x1002)
	(SFC_GET_NORM_DOUBLE #.#x1010)
	(SFC_GET_NORM_FLOAT #.#x1011)
	(SFC_SET_NORM_DOUBLE #.#x1012)
	(SFC_SET_NORM_FLOAT #.#x1013)
	(SFC_SET_SCALE_FLOAT_INT_READ #.#x1014)
	(SFC_SET_SCALE_INT_FLOAT_WRITE #.#x1015)
	(SFC_GET_SIMPLE_FORMAT_COUNT #.#x1020)
	(SFC_GET_SIMPLE_FORMAT #.#x1021)
	(SFC_GET_FORMAT_INFO #.#x1028)
	(SFC_GET_FORMAT_MAJOR_COUNT #.#x1030)
	(SFC_GET_FORMAT_MAJOR #.#x1031)
	(SFC_GET_FORMAT_SUBTYPE_COUNT #.#x1032)
	(SFC_GET_FORMAT_SUBTYPE #.#x1033)
	(SFC_CALC_SIGNAL_MAX #.#x1040)
	(SFC_CALC_NORM_SIGNAL_MAX #.#x1041)
	(SFC_CALC_MAX_ALL_CHANNELS #.#x1042)
	(SFC_CALC_NORM_MAX_ALL_CHANNELS #.#x1043)
	(SFC_GET_SIGNAL_MAX #.#x1044)
	(SFC_GET_MAX_ALL_CHANNELS #.#x1045)
	(SFC_SET_ADD_PEAK_CHUNK #.#x1050)
	(SFC_SET_ADD_HEADER_PAD_CHUNK #.#x1051)
	(SFC_UPDATE_HEADER_NOW #.#x1060)
	(SFC_SET_UPDATE_HEADER_AUTO #.#x1061)
	(SFC_FILE_TRUNCATE #.#x1080)
	(SFC_SET_RAW_START_OFFSET #.#x1090)
	(SFC_SET_DITHER_ON_WRITE #.#x10A0)
	(SFC_SET_DITHER_ON_READ #.#x10A1)
	(SFC_GET_DITHER_INFO_COUNT #.#x10A2)
	(SFC_GET_DITHER_INFO #.#x10A3)
	(SFC_GET_EMBED_FILE_INFO #.#x10B0)
	(SFC_SET_CLIPPING #.#x10C0)
	(SFC_GET_CLIPPING #.#x10C1)
	(SFC_GET_CUE_COUNT #.#x10CD)
	(SFC_GET_CUE #.#x10CE)
	(SFC_SET_CUE #.#x10CF)
	(SFC_GET_INSTRUMENT #.#x10D0)
	(SFC_SET_INSTRUMENT #.#x10D1)
	(SFC_GET_LOOP_INFO #.#x10E0)
	(SFC_GET_BROADCAST_INFO #.#x10F0)
	(SFC_SET_BROADCAST_INFO #.#x10F1)
	(SFC_GET_CHANNEL_MAP_INFO #.#x1100)
	(SFC_SET_CHANNEL_MAP_INFO #.#x1101)
	(SFC_RAW_DATA_NEEDS_ENDSWAP #.#x1110)
	(SFC_WAVEX_SET_AMBISONIC #.#x1200)
	(SFC_WAVEX_GET_AMBISONIC #.#x1201)
	(SFC_RF64_AUTO_DOWNGRADE #.#x1210)
	(SFC_SET_VBR_ENCODING_QUALITY #.#x1300)
	(SFC_SET_COMPRESSION_LEVEL #.#x1301)
	(SFC_SET_CART_INFO #.#x1400)
	(SFC_GET_CART_INFO #.#x1401)
	(SFC_TEST_IEEE_FLOAT_REPLACE #.#x6001)
	(SFC_SET_ADD_DITHER_ON_WRITE #.#x1070)
	(SFC_SET_ADD_DITHER_ON_READ #.#x1071))

(defanonenum 
	(SF_STR_TITLE #.#x01)
	(SF_STR_COPYRIGHT #.#x02)
	(SF_STR_SOFTWARE #.#x03)
	(SF_STR_ARTIST #.#x04)
	(SF_STR_COMMENT #.#x05)
	(SF_STR_DATE #.#x06)
	(SF_STR_ALBUM #.#x07)
	(SF_STR_LICENSE #.#x08)
	(SF_STR_TRACKNUMBER #.#x09)
	(SF_STR_GENRE #.#x10))

(defanonenum 
	(SF_FALSE #.0)
	(SF_TRUE #.1)
	(SFM_READ #.#x10)
	(SFM_WRITE #.#x20)
	(SFM_RDWR #.#x30)
	(SF_AMBISONIC_NONE #.#x40)
	(SF_AMBISONIC_B_FORMAT #.#x41))

(defanonenum 
	(SF_ERR_NO_ERROR #.0)
	(SF_ERR_UNRECOGNISED_FORMAT #.1)
	(SF_ERR_SYSTEM #.2)
	(SF_ERR_MALFORMED_FILE #.3)
	(SF_ERR_UNSUPPORTED_ENCODING #.4))

(defanonenum 
	(SF_CHANNEL_MAP_INVALID #.0)
	(SF_CHANNEL_MAP_MONO #.1)
	SF_CHANNEL_MAP_LEFT
	SF_CHANNEL_MAP_RIGHT
	SF_CHANNEL_MAP_CENTER
	SF_CHANNEL_MAP_FRONT_LEFT
	SF_CHANNEL_MAP_FRONT_RIGHT
	SF_CHANNEL_MAP_FRONT_CENTER
	SF_CHANNEL_MAP_REAR_CENTER
	SF_CHANNEL_MAP_REAR_LEFT
	SF_CHANNEL_MAP_REAR_RIGHT
	SF_CHANNEL_MAP_LFE
	SF_CHANNEL_MAP_FRONT_LEFT_OF_CENTER
	SF_CHANNEL_MAP_FRONT_RIGHT_OF_CENTER
	SF_CHANNEL_MAP_SIDE_LEFT
	SF_CHANNEL_MAP_SIDE_RIGHT
	SF_CHANNEL_MAP_TOP_CENTER
	SF_CHANNEL_MAP_TOP_FRONT_LEFT
	SF_CHANNEL_MAP_TOP_FRONT_RIGHT
	SF_CHANNEL_MAP_TOP_FRONT_CENTER
	SF_CHANNEL_MAP_TOP_REAR_LEFT
	SF_CHANNEL_MAP_TOP_REAR_RIGHT
	SF_CHANNEL_MAP_TOP_REAR_CENTER
	SF_CHANNEL_MAP_AMBISONIC_B_W
	SF_CHANNEL_MAP_AMBISONIC_B_X
	SF_CHANNEL_MAP_AMBISONIC_B_Y
	SF_CHANNEL_MAP_AMBISONIC_B_Z
	SF_CHANNEL_MAP_MAX)

;; (cl:defconstant SF_COUNT_MAX #x7FFFFFFFFFFFFFFFLL)

;; Removing the LL from the end, as Lisp doesn't seem to understand it
(cl:defconstant SF_COUNT_MAX #x7FFFFFFFFFFFFFFF)

(cffi:defcstruct SF_INFO
	(frames :pointer)
	(samplerate :int)
	(channels :int)
	(format :int)
	(sections :int)
	(seekable :int))

(cffi:defcstruct SF_FORMAT_INFO
	(format :int)
	(name :string)
	(extension :string))

(defanonenum 
	(SFD_DEFAULT_LEVEL #.0)
	(SFD_CUSTOM_LEVEL #.#x40000000)
	(SFD_NO_DITHER #.500)
	(SFD_WHITE #.501)
	(SFD_TRIANGULAR_PDF #.502))

(cffi:defcstruct SF_DITHER_INFO
	(type :int)
	(level :double)
	(name :string))

(cffi:defcstruct SF_EMBED_FILE_INFO
	(offset :pointer)
	(length :pointer))

(cffi:defcstruct SF_CUE_POINT
	(indx :pointer)
	(position :pointer)
	(fcc_chunk :pointer)
	(chunk_start :pointer)
	(block_start :pointer)
	(sample_offset :pointer)
	(name :pointer :count 256))

(cffi:defcstruct SF_CUES
	(cue_count :pointer)
	(cue_points :pointer :count 100))

(defanonenum 
	(SF_LOOP_NONE #.800)
	SF_LOOP_FORWARD
	SF_LOOP_BACKWARD
	SF_LOOP_ALTERNATING)

(cffi:defcstruct SF_INSTRUMENT
	(gain :int)
	(basenote :char)
	(detune :char)
	(velocity_lo :char)
	(velocity_hi :char)
	(key_lo :char)
	(key_hi :char)
	(loop_count :int)
	(loops :pointer :count 16))

(cffi:defcstruct SF_INSTRUMENT_loops
	(mode :int)
	(start :pointer)
	(end :pointer)
	(count :pointer))

(cffi:defcstruct SF_LOOP_INFO
	(time_sig_num :short)
	(time_sig_den :short)
	(loop_mode :int)
	(num_beats :int)
	(bpm :float)
	(root_key :int)
	(future :pointer :count 6))

(cffi:defcstruct SF_BROADCAST_INFO
	(description :pointer :count 256)
	(originator :pointer :count 32)
	(originator_reference :pointer :count 32)
	(origination_date :pointer :count 10)
	(origination_time :pointer :count 8)
	(time_reference_low :pointer)
	(time_reference_high :pointer)
	(version :short)
	(umid :pointer :count 64)
	(reserved :pointer :count 190)
	(coding_history_size :pointer)
	(coding_history :pointer :count 256))

(cffi:defcstruct SF_CART_TIMER
	(usage :pointer :count 4)
	(value :pointer))

(cffi:defcstruct SF_CART_INFO
	(version :pointer :count 4)
	(title :pointer :count 64)
	(artist :pointer :count 64)
	(cut_id :pointer :count 64)
	(client_id :pointer :count 64)
	(category :pointer :count 64)
	(classification :pointer :count 64)
	(out_cue :pointer :count 64)
	(start_date :pointer :count 10)
	(start_time :pointer :count 8)
	(end_date :pointer :count 10)
	(end_time :pointer :count 8)
	(producer_app_id :pointer :count 64)
	(producer_app_version :pointer :count 64)
	(user_def :pointer :count 64)
	(level_reference :pointer)
	(post_timers :pointer :count 8)
	(reserved :pointer :count 276)
	(url :pointer :count 1024)
	(tag_text_size :pointer)
	(tag_text :pointer :count 256))

(cffi:defcstruct SF_VIRTUAL_IO
	(get_filelen :pointer)
	(seek :pointer)
	(read :pointer)
	(write :pointer)
	(tell :pointer))

(cffi:defcfun ("sf_open" sf_open) :pointer
  (path :string)
  (mode :int)
  (sfinfo :pointer))

(cffi:defcfun ("sf_open_fd" sf_open_fd) :pointer
  (fd :int)
  (mode :int)
  (sfinfo :pointer)
  (close_desc :int))

(cffi:defcfun ("sf_open_virtual" sf_open_virtual) :pointer
  (sfvirtual :pointer)
  (mode :int)
  (sfinfo :pointer)
  (user_data :pointer))

(cffi:defcfun ("sf_error" sf_error) :int
  (sndfile :pointer))

(cffi:defcfun ("sf_strerror" sf_strerror) :string
  (sndfile :pointer))

(cffi:defcfun ("sf_error_number" sf_error_number) :string
  (errnum :int))

(cffi:defcfun ("sf_perror" sf_perror) :int
  (sndfile :pointer))

(cffi:defcfun ("sf_error_str" sf_error_str) :int
  (sndfile :pointer)
  (str :string)
  (len :pointer))

(cffi:defcfun ("sf_command" sf_command) :int
  (sndfile :pointer)
  (command :int)
  (data :pointer)
  (datasize :int))

(cffi:defcfun ("sf_format_check" sf_format_check) :int
  (info :pointer))

;; (defanonenum 
;; 	(SF_SEEK_SET #.SEEK_SET)
;; 	(SF_SEEK_CUR #.SEEK_CUR)
;; 	(SF_SEEK_END #.SEEK_END))

;; Having to edit these with the values from stdio.h:
(defanonenum 
  (SF_SEEK_SET 0)
  (SF_SEEK_CUR 1)
  (SF_SEEK_END 2))

(cffi:defcfun ("sf_seek" sf_seek) :pointer
  (sndfile :pointer)
  (frames :pointer)
  (whence :int))

(cffi:defcfun ("sf_set_string" sf_set_string) :int
  (sndfile :pointer)
  (str_type :int)
  (str :string))

(cffi:defcfun ("sf_get_string" sf_get_string) :string
  (sndfile :pointer)
  (str_type :int))

(cffi:defcfun ("sf_version_string" sf_version_string) :string)

(cffi:defcfun ("sf_current_byterate" sf_current_byterate) :int
  (sndfile :pointer))

(cffi:defcfun ("sf_read_raw" sf_read_raw) :pointer
  (sndfile :pointer)
  (ptr :pointer)
  (bytes :pointer))

(cffi:defcfun ("sf_write_raw" sf_write_raw) :pointer
  (sndfile :pointer)
  (ptr :pointer)
  (bytes :pointer))

(cffi:defcfun ("sf_readf_short" sf_readf_short) :pointer
  (sndfile :pointer)
  (ptr :pointer)
  (frames :pointer))

(cffi:defcfun ("sf_writef_short" sf_writef_short) :pointer
  (sndfile :pointer)
  (ptr :pointer)
  (frames :pointer))

(cffi:defcfun ("sf_readf_int" sf_readf_int) :pointer
  (sndfile :pointer)
  (ptr :pointer)
  (frames :pointer))

(cffi:defcfun ("sf_writef_int" sf_writef_int) :pointer
  (sndfile :pointer)
  (ptr :pointer)
  (frames :pointer))

(cffi:defcfun ("sf_readf_float" sf_readf_float) :pointer
  (sndfile :pointer)
  (ptr :pointer)
  (frames :pointer))

(cffi:defcfun ("sf_writef_float" sf_writef_float) :pointer
  (sndfile :pointer)
  (ptr :pointer)
  (frames :pointer))

(cffi:defcfun ("sf_readf_double" sf_readf_double) :pointer
  (sndfile :pointer)
  (ptr :pointer)
  (frames :pointer))

(cffi:defcfun ("sf_writef_double" sf_writef_double) :pointer
  (sndfile :pointer)
  (ptr :pointer)
  (frames :pointer))

(cffi:defcfun ("sf_read_short" sf_read_short) :pointer
  (sndfile :pointer)
  (ptr :pointer)
  (items :pointer))

(cffi:defcfun ("sf_write_short" sf_write_short) :pointer
  (sndfile :pointer)
  (ptr :pointer)
  (items :pointer))

(cffi:defcfun ("sf_read_int" sf_read_int) :pointer
  (sndfile :pointer)
  (ptr :pointer)
  (items :pointer))

(cffi:defcfun ("sf_write_int" sf_write_int) :pointer
  (sndfile :pointer)
  (ptr :pointer)
  (items :pointer))

(cffi:defcfun ("sf_read_float" sf_read_float) :pointer
  (sndfile :pointer)
  (ptr :pointer)
  (items :pointer))

(cffi:defcfun ("sf_write_float" sf_write_float) :pointer
  (sndfile :pointer)
  (ptr :pointer)
  (items :pointer))

(cffi:defcfun ("sf_read_double" sf_read_double) :pointer
  (sndfile :pointer)
  (ptr :pointer)
  (items :pointer))

(cffi:defcfun ("sf_write_double" sf_write_double) :pointer
  (sndfile :pointer)
  (ptr :pointer)
  (items :pointer))

(cffi:defcfun ("sf_close" sf_close) :int
  (sndfile :pointer))

(cffi:defcfun ("sf_write_sync" sf_write_sync) :void
  (sndfile :pointer))

(cffi:defcstruct SF_CHUNK_INFO
	(id :pointer :count 64)
	(id_size :unsigned-int)
	(datalen :unsigned-int)
	(data :pointer))

(cffi:defcfun ("sf_set_chunk" sf_set_chunk) :int
  (sndfile :pointer)
  (chunk_info :pointer))

(cffi:defcfun ("sf_get_chunk_iterator" sf_get_chunk_iterator) :pointer
  (sndfile :pointer)
  (chunk_info :pointer))

(cffi:defcfun ("sf_next_chunk_iterator" sf_next_chunk_iterator) :pointer
  (iterator :pointer))

(cffi:defcfun ("sf_get_chunk_size" sf_get_chunk_size) :int
  (it :pointer)
  (chunk_info :pointer))

(cffi:defcfun ("sf_get_chunk_data" sf_get_chunk_data) :int
  (it :pointer)
  (chunk_info :pointer))


